/*
	This exercises Genome method -containsMarkerMutation()
*/

initialize() {
	initializeMutationRate(1e-6);
	initializeMutationType("m1", 0.5, "f", 0.0);       // neutral
	initializeMutationType("m2", 0.5, "n", 0.0, 0.2);  // QTLs
	m2.convertToSubstitution = F;
	initializeGenomicElementType("g1", c(m1, m2), c(1,1));
	initializeGenomicElement(g1, 0, 9999999);
	initializeRecombinationRate(1e-6);
}
mutationEffect(m2) { return 1.0; }
1 early() { sim.addSubpop("p1", 100); }
199 late() {
	sim.chromosome.setMutationRate(0.0);
	sim.chromosome.setRecombinationRate(0.0);
	p1.setCloningRate(1.0);
	p1.setSubpopulationSize(1000000);
	
	// choose a mutation near 0.5 frequency to search for
	muts = sim.mutations;
	freqs = sim.mutationFrequencies(NULL);
	d_05 = abs(0.5 - freqs);
	i = whichMin(d_05);
	defineGlobal("MUT", muts[i]);
	catn("chose mutation with frequency " + freqs[i]);
}
200 late() {
	genomes = sim.subpopulations.genomes;
	
	start = clock("mono");
	for (i in 1:400) counts = genomes.containsMarkerMutation(MUT.mutationType, MUT.position, returnMutation=F);
	catn("// ********** Benchmark time: " + (clock("mono") - start));
}
