/*
	This exercises fitness calculations with:
		individual fitnessScaling and non-neutral mutations
	A nonWF model is used so we can coast without reproduction.
*/

initialize() {
	// This model uses an internal benchmark
	_startBenchmark("FITNESS_SEX_3");
	
	initializeSLiMModelType("nonWF");
	
	initializeMutationType("m1", 0.5, "n", 0.0, 0.0001);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 1e8-1);
	initializeMutationRate(1e-4);
	initializeRecombinationRate(1e-8);
	initializeSex("A");
}
// start at size 10
1 early() {
	sim.addSubpop("p1", 10);
}

// generate lots of new mutations for 10 ticks
2:10 reproduction(NULL, "F") {
	mate = subpop.sampleIndividuals(1, sex="M");
	subpop.addCrossed(individual, mate, sex="M");
	subpop.addCrossed(individual, mate, sex="F");
}

// scale up to 1000 individuals
11 first() {
	sim.chromosome.setMutationRate(0.0);
}
11 reproduction(NULL, "F") {
	mate = subpop.sampleIndividuals(1, sex="M");
	for (i in 1:100)
		subpop.addCrossed(individual, mate, sex="M");
	for (i in 1:100)
		subpop.addCrossed(individual, mate, sex="F");
}

// kill the parental generation after each new generation
2:11 early() {
	parents = p1.subsetIndividuals(minAge=1);
	parents.fitnessScaling = 0.0;
}

early()
{
	// prevent any individuals from dying due to meleterious muts
	p1.fitnessScaling = 5.0;
}

// then coast, with no reproduction, long enough for this stage to dominate
25 late() {
	//catn("elapsed: " + _stopBenchmark());

	// summarize results
	catn("### NO SUMMARY ###");
}
